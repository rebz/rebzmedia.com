@import url(https://use.typekit.net/ppj6sgi.css);/*
 *  Methodologies for this Project
 *
 *
 *  ITCSS
 *  https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/
 *
 *  Stands for Inverted Triangle CSS and it helps you to organize your
 *  project CSS files in such way that you can better deal with
 *  (not always easy-to-deal with) CSS specifics like global
 *  namespace, cascade and selectors specificity.
 *
 *
 *  BEM
 *  http://getbem.com/introduction/
 *
 *  Stands for Block Element Modifier and helps to avoid inheritance,
 *  provides some sort of scope by using unique CSS classes per
 *  element (like .Button__icon--active), and reduces style
 *  conflicts by keeping CSS specificity to a minimum level.
 */

/*
 *  Variables, Fonts, Colors, Definitions, Branding
 */

/*
 *  Variables used for mixins
 */

/*
 *  Base Colors
 */

/*
 *  Background Colors
 */

/*
 *  Base Animation Variables
 */

/*
 *  NProgress Bar Colors
 */

/*
 *  User Select / Text Highlight
 */

/*
 *  Colors for other variables
 */

/*
 *  Styling for HTML and Body elements
 */

/*
 *  Global mixins and functions.
 */

/* Gradient: Top to Bottom */

.wrap {
  *zoom: 1;
}

.wrap:before,
.wrap:after {
  content: ' ';
  display: table;
}

.wrap:after {
  clear: both;
}

/*
 *  Reset Stylesheets, first layer of CSS.
 */

* {
  box-sizing: border-box;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -o-box-sizing: border-box;
}

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  outline: none;
}

img {
  border: 0;
  -ms-interpolation-mode: bicubic;
  vertical-align: middle;
  max-width: 100%;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

small {
  font-size: 80%;
}

ins {
  background: #ff0;
  color: #000;
  text-decoration: none;
}

mark {
  background: #ff0;
  color: #000;
}

del {
  text-decoration: line-through;
}

b,
strong {
  font-weight: bold;
}

em,
dfn {
  font-style: italic;
}

abbr[title],
dfn[title] {
  border-bottom: 1px dotted;
  cursor: help;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

hr {
  height: 0;
  box-sizing: content-box;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
}

legend {
  white-space: normal;
  margin-left: -7px;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

caption,
th,
td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

pre,
code,
kbd,
samp {
  font-family: monospace, serif;
  _font-family: 'courier new', monospace;
  font-size: 1em;
}

pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
}

/* Improve readability of pre-formatted text in all browsers */

svg:not(:root) {
  overflow: visible;
}

/* Correct overflow not hidden in IE9 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* HTML5 Definitions */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

audio,
canvas,
video {
  display: inline-block;
  display: inline;
  zoom: 1;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

[hidden] {
  display: none;
}

/* Reset Form Styles */

button[disabled],
input[disabled] {
  cursor: default;
}

button,
input {
  line-height: normal;
}

/* Define line-height as normal to match FF3/4 */

select,
input,
textarea,
button {
  font-size: 100%;
  vertical-align: baseline;
  vertical-align: middle;
  text-transform: none;
}

/* Font Normalization */

textarea {
  overflow: auto;
  vertical-align: top;
  resize: vertical;
}

button {
  width: auto;
  overflow: visible;
  border: #fff solid 0px;
}

/* Make buttons play nice in IE */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/* Remove inner padding and border in FF3/4 */

/* Consistent box sizing and appearance */

input[type="checkbox"],
input[type="radio"] {
  padding: 0;
  width: 13px;
  height: 13px;
}

input[type="search"] {
  -webkit-appearance: textfield;
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
}

input[type="search"]::-webkit-search-decoration,
input[type="search"]::-webkit-search-cancel-button {
  -webkit-appearance: none;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/* Remove inner padding and border in FF3/4: h5bp.com/l */

/* Align checkboxes, radios, text inputs with their label */

input[type="checkbox"],
input[type="radio"] {
  height: 13px;
  width: 13px;
  vertical-align: middle;
}

/* Hand cursor on clickable input elements */

label,
input[type="button"],
input[type="submit"],
input[type="reset"],
input[type="image"],
button {
  cursor: pointer;
  -webkit-appearance: none;
  overflow: visible;
}

/* Colors for form validity */

input:invalid,
textarea:invalid {
  background-color: #f0dddd;
}

/* Highlight Styles */

::-moz-selection {
  background: #000;
  color: #fff;
  text-shadow: none;
}

::selection {
  background: #000;
  color: #fff;
  text-shadow: none;
}

.m2-header {
  position: relative;
  height: 800px;
  width: 100%;
  background-image: url("/images/module2/temp.jpg");
}

.m2-header:before {
  content: ' ';
  position: absolute;
  background: -webkit-gradient(linear, left top, left bottom, from(transparent), to(white));
  background: linear-gradient(transparent, white);
  height: 800px;
  width: 100%;
}

.slide {
  border: 5px solid black;
  margin: 50px;
}

.slide-header {
  font-size: 30pt;
  font-weight: 400;
}

.citation-source {
  color: #A59D95;
  font-size: 16px;
}

/*
 *  Styling of Bare elements like H1, p, a, etc.
 */

/* Base Styles */

html {
  font-size: 62.5%;
  min-height: 100%;
  background-color: none;
  overflow-y: scroll;
}

body {
  min-height: 100%;
  line-height: 1;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  -webkit-font-smoothing: subpixel-antialiased;
  background-color: none;
}

body,
button,
input,
select,
textarea {
  color: #444;
  font-style: normal;
  font-family: "Source Sans Pro", "Open Sans", Helvetica, Arial, Verdana, sans-serif;
  font-size: 16px;
  font-size: 1.6rem;
}

h1 {
  font-size: 30px;
  font-size: 3rem;
  line-height: 140%;
}

h2 {
  font-size: 22px;
  font-size: 2.2rem;
  font-weight: 300;
  margin-bottom: 20px;
}

h3 {
  font-size: 20px;
  font-size: 2rem;
  font-weight: 300;
  margin-bottom: 8px;
}

p {
  line-height: 130%;
  padding: 3px 0 2px;
  margin-bottom: 10px;
}

hr {
  border: none;
  border-top: #fff solid 1px;
  margin: 30px 0;
}

/*
 *  Class-based selectors which define undecorated
 *  design patterns, for example media object
 *  known from OOCSS.
 */

/*
 *  Specific UI components. This is where majority
 *  of our work takes place and our UI components
 *  are often composed of Objects and Components.
 */

.Home__bg {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

.Home__bg span {
  font-family: "proxima-nova";
  font-weight: 900;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  font-size: 33.33vh;
  line-height: 33.33vh;
  letter-spacing: 2vw;
}

.Navigation {
  display: none;
}

/*
 *  Helper classes with ability to override
 *  anything which goes before in the
 *  triangle, eg. hide helper class.
 */

.wrap {
  max-width: 1200px;
  margin: 0 auto;
}

.al {
  text-align: left;
}

.ac {
  text-align: center;
}

.ar {
  text-align: right;
}

.fl {
  float: left;
}

.fr {
  float: right;
}

.hidden {
  display: none !important;
  visibility: hidden;
}

/* Hide from both screenreaders and browsers */

.invisible {
  visibility: hidden;
}

/* Hide visually and from screenreaders, but maintain layout */

.noscroll {
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/